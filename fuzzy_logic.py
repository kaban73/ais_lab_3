import numpy as np
from config import LIGHT_RANGES, TIME_RANGES, WEATHER_CATEGORIES


class FuzzyLogic:
    @staticmethod
    def triangular_mf(x, a, b, c):
        """–¢—Ä–µ—É–≥–æ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏"""
        if x <= a or x >= c:
            return 0.0
        elif a < x <= b:
            return (x - a) / (b - a)
        elif b < x < c:
            return (c - x) / (c - b)
        return 0.0

    @staticmethod
    def fuzzify_light(light_value):
        """–§–∞–∑–∑–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Ä–æ–≤–Ω—è –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç–∏"""
        return {
            'dark': FuzzyLogic.triangular_mf(light_value, *LIGHT_RANGES['dark']),
            'twilight': FuzzyLogic.triangular_mf(light_value, *LIGHT_RANGES['twilight']),
            'light': FuzzyLogic.triangular_mf(light_value, *LIGHT_RANGES['light'])
        }

    @staticmethod
    def fuzzify_time(time_value):
        """–§–∞–∑–∑–∏—Ñ–∏–∫–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫"""
        return {
            'night': FuzzyLogic.triangular_mf(time_value, *TIME_RANGES['night']),
            'morning': FuzzyLogic.triangular_mf(time_value, *TIME_RANGES['morning']),
            'day': FuzzyLogic.triangular_mf(time_value, *TIME_RANGES['day']),
            'evening': FuzzyLogic.triangular_mf(time_value, *TIME_RANGES['evening'])
        }

    @staticmethod
    def fuzzify_weather(weather_value):
        """–§–∞–∑–∑–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–≥–æ–¥—ã (—á–µ—Ç–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)"""
        result = {category: 0.0 for category in WEATHER_CATEGORIES}
        if weather_value in WEATHER_CATEGORIES:
            result[weather_value] = 1.0
        return result

    @staticmethod
    def evaluate_condition(condition, fuzzy_values):
        """–û—Ü–µ–Ω–∫–∞ —É—Å–ª–æ–≤–∏—è –ø—Ä–∞–≤–∏–ª–∞ —Å –Ω–µ—á–µ—Ç–∫–æ–π –ª–æ–≥–∏–∫–æ–π"""
        try:
            # –ë–µ—Ä–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            time_val = fuzzy_values['time']
            light_val = fuzzy_values['light']
            weather_val = fuzzy_values['weather']

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º SQL-–ø–æ–¥–æ–±–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –≤ Python
            condition = condition.replace('BETWEEN', '>=')
            condition = condition.replace('AND', 'and')
            condition = condition.replace('OR', 'or')

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ –¥–ª—è –ø–æ–≥–æ–¥—ã
            condition = condition.replace('weather = "', 'weather_val == "')
            condition = condition.replace("weather = '", "weather_val == '")

            # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è eval
            safe_dict = {
                'time': time_val,
                'light': light_val,
                'weather_val': weather_val
            }

            # –í—ã—á–∏—Å–ª—è–µ–º —É—Å–ª–æ–≤–∏–µ
            result = eval(condition, {"__builtins__": {}}, safe_dict)
            return bool(result)

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —É—Å–ª–æ–≤–∏–∏ '{condition}': {e}")
            return False


class InferenceEngine:
    def __init__(self, neo4j_manager):
        self.neo4j_manager = neo4j_manager
        self.fuzzy_logic = FuzzyLogic()

    def process_sensors(self, time, light, weather):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ–Ω—Å–æ—Ä–æ–≤ –∏ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π"""
        print(f"\nüìä –î–∞–Ω–Ω—ã–µ —Å–µ–Ω—Å–æ—Ä–æ–≤: –≤—Ä–µ–º—è={time}, –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç—å={light}, –ø–æ–≥–æ–¥–∞={weather}")

        # –§–∞–∑–∑–∏—Ñ–∏–∫–∞—Ü–∏—è
        fuzzy_light = self.fuzzy_logic.fuzzify_light(light)
        fuzzy_time = self.fuzzy_logic.fuzzify_time(time)
        fuzzy_weather = self.fuzzy_logic.fuzzify_weather(weather)

        print(f"üîπ –ù–µ—á–µ—Ç–∫–∞—è –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç—å: {fuzzy_light}")
        print(f"üîπ –ù–µ—á–µ—Ç–∫–æ–µ –≤—Ä–µ–º—è: {fuzzy_time}")
        print(f"üîπ –ù–µ—á–µ—Ç–∫–∞—è –ø–æ–≥–æ–¥–∞: {fuzzy_weather}")

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ –∏–∑ –±–∞–∑—ã
        rules = self.neo4j_manager.get_all_rules()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –ø—Ä–∞–≤–∏–ª
        activated_rules = []
        sensor_values = {'time': time, 'light': light, 'weather': weather}

        for rule in rules:
            if self.fuzzy_logic.evaluate_condition(rule['condition'], sensor_values):
                activated_rules.append(rule)
                print(f"‚úÖ –°—Ä–∞–±–æ—Ç–∞–ª–æ –ø—Ä–∞–≤–∏–ª–æ: {rule['rule_name']}")

        return activated_rules


# –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—á–µ—Ç–∫—É—é –ª–æ–≥–∏–∫—É
if __name__ == "__main__":
    from neo4j_manager import Neo4jManager

    manager = Neo4jManager()
    engine = InferenceEngine(manager)

    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    print("üß™ –¢–µ—Å—Ç 1: –ù–æ—á—å, —Ç–µ–º–Ω–æ, —è—Å–Ω–æ")
    engine.process_sensors(time=22, light=0.1, weather="clear")

    print("\nüß™ –¢–µ—Å—Ç 2: –£—Ç—Ä–æ, –æ–±–ª–∞—á–Ω–æ")
    engine.process_sensors(time=7.5, light=0.4, weather="cloudy")

    print("\nüß™ –¢–µ—Å—Ç 3: –î–µ–Ω—å, —Å–≤–µ—Ç–ª–æ")
    engine.process_sensors(time=14, light=0.8, weather="clear")

    manager.close()