from neo4j import GraphDatabase
from config import NEO4J_URI, NEO4J_USERNAME, NEO4J_PASSWORD, NEO4J_DATABASE


class Neo4jManager:
    def __init__(self):
        self.driver = GraphDatabase.driver(
            NEO4J_URI,
            auth=(NEO4J_USERNAME, NEO4J_PASSWORD)
        )

    def close(self):
        self.driver.close()

    def get_all_rules(self):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞ –∏–∑ –±–∞–∑—ã"""
        with self.driver.session() as session:
            result = session.run("""
                MATCH (r:Rule)-[:TRIGGERS]->(a:ActionType)
                RETURN r.name as rule_name, 
                       r.description as description,
                       r.condition as condition, 
                       r.priority as priority,
                       a.name as action_name,
                       a.intensity as intensity
                ORDER BY r.priority
            """)
            return [dict(record) for record in result]

    def test_connection(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neo4j"""
        try:
            rules = self.get_all_rules()
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Neo4j Aura —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìã –ù–∞–π–¥–µ–Ω–æ –ø—Ä–∞–≤–∏–ª: {len(rules)}")
            for rule in rules:
                print(f"  üéØ {rule['rule_name']}: {rule['condition']} ‚Üí {rule['action_name']}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False


# –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
if __name__ == "__main__":
    manager = Neo4jManager()

    if manager.test_connection():
        print("\nüéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("–ú–æ–∂–µ–º –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –Ω–µ—á–µ—Ç–∫–æ–π –ª–æ–≥–∏–∫–µ!")

    manager.close()

